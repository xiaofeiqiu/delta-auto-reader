#!/usr/bin/env python3
"""
最终的覆盖列功能使用示例
Final Column Overwrite Functionality Example
"""

print("=" * 80)
print("🎯 最终实现：默认覆盖列的字典 Lambda 变换函数")
print("🎯 Final Implementation: Dictionary Lambda Transform Functions with Default Column Overwrite")
print("=" * 80)

print("✅ 现在的实现特点:")
print("✅ Current Implementation Features:")
print()
print("1. 🔄 默认覆盖原列 (Default: Overwrite original column)")
print("2. 📝 可选择创建新列 (Optional: Create new column)")
print("3. 🎯 可自定义列名 (Custom column naming)")
print("4. 📚 字典方式调用 (Dictionary-based calling)")
print()

print("=" * 80)
print("📋 实际使用示例")
print("📋 Real Usage Examples")
print("=" * 80)

print("# 导入变换字典")
print("# Import transform dictionary")
print("from feature_store_sdk.projection import TRANSFORM_LAMBDAS")
print()
print("# 简化引用")
print("# Simplified reference")
print("transforms = TRANSFORM_LAMBDAS")
print()

print("# 示例数据")
print("# Sample data")
print("df = pd.DataFrame({")
print("    'transaction_date': pd.to_datetime(['2023-05-15', '2022-12-25']),")
print("    'customer_name': ['john doe', 'jane smith'],")
print("    'account_id': [123, 45],")
print("    'status': ['active', 'inactive']")
print("})")
print()

print("=" * 80)
print("🔄 方式 1: 默认覆盖 (Default Overwrite)")
print("=" * 80)
print("# 这些变换会直接覆盖原列")
print("# These transforms will directly overwrite original columns")
print()
print('my_transforms = [')
print('    transforms["year"]("transaction_date"),      # transaction_date → 年份')
print('    transforms["upper"]("customer_name"),        # customer_name → 大写')
print('    transforms["lpad"]("account_id", 8, "0"),    # account_id → 左填充')
print('    transforms["nullif"]("status", "inactive")   # status → NULL替换')
print(']')
print()
print("结果:")
print("Result:")
print("• transaction_date: [2023-05-15, 2022-12-25] → [2023, 2022]")
print("• customer_name: ['john doe', 'jane smith'] → ['JOHN DOE', 'JANE SMITH']")
print("• account_id: [123, 45] → ['00000123', '00000045']")
print("• status: ['active', 'inactive'] → ['active', None]")
print()

print("=" * 80)
print("📝 方式 2: 创建新列 (Create New Columns)")
print("=" * 80)
print("# 如果需要保留原列，设置 overwrite=False")
print("# If you need to keep original columns, set overwrite=False")
print()
print('my_transforms = [')
print('    transforms["year"]("transaction_date", overwrite=False),    # 创建 transaction_date_year')
print('    transforms["upper"]("customer_name", overwrite=False),      # 创建 customer_name_upper')
print('    transforms["lpad"]("account_id", 8, "0", overwrite=False),  # 创建 account_id_lpad')
print(']')
print()

print("=" * 80)
print("🎯 方式 3: 自定义列名 (Custom Column Names)")
print("=" * 80)
print("# 自定义输出列名")
print("# Custom output column names")
print()
print('my_transforms = [')
print('    transforms["year"]("transaction_date", output_name="year", overwrite=False),')
print('    transforms["upper"]("customer_name", output_name="name_caps", overwrite=False),')
print('    transforms["lpad"]("account_id", 8, "0", output_name="padded_id", overwrite=False)')
print(']')
print()

print("=" * 80)
print("⚡ 方式 4: 混合使用 (Mixed Usage)")
print("=" * 80)
print("# 灵活组合：有些覆盖，有些创建新列")
print("# Flexible combination: some overwrite, some create new columns")
print()
print('my_transforms = [')
print('    transforms["upper"]("customer_name"),                           # 覆盖原列')
print('    transforms["year"]("transaction_date", overwrite=False),        # 创建新列')
print('    transforms["lpad"]("account_id", 8, "0", output_name="id_pad", overwrite=False)  # 自定义名称')
print(']')
print()

print("=" * 80)
print("🚀 最简使用模式")
print("🚀 Simplest Usage Pattern")
print("=" * 80)
print("# 你想要的最简洁方式：")
print("# The most concise way you wanted:")
print()
print("transforms = {")
print('    "year": lambda col: TRANSFORM_LAMBDAS["year"](col),')
print('    "upper": lambda col: TRANSFORM_LAMBDAS["upper"](col),')
print('    "lpad": lambda col, length, pad: TRANSFORM_LAMBDAS["lpad"](col, length, pad)')
print("}")
print()
print("# 使用:")
print("# Usage:")
print('year_transform = transforms["year"]("date_col")      # 覆盖 date_col')
print('upper_transform = transforms["upper"]("text_col")    # 覆盖 text_col')
print('lpad_transform = transforms["lpad"]("id_col", 8, "0") # 覆盖 id_col')
print()

print("=" * 80)
print("📊 所有参数说明")
print("📊 All Parameters Explained")
print("=" * 80)
print("每个变换函数支持的参数:")
print("Parameters supported by each transform function:")
print()
print("基础函数 (Basic functions):")
print('• transforms["year"](col, output_name=None, overwrite=True)')
print('• transforms["month"](col, output_name=None, overwrite=True)')
print('• transforms["day"](col, output_name=None, overwrite=True)')
print('• transforms["upper"](col, output_name=None, overwrite=True)')
print()
print("带参数的函数 (Functions with parameters):")
print('• transforms["lpad"](col, length, pad_string=" ", output_name=None, overwrite=True)')
print('• transforms["nullif"](col, value, output_name=None, overwrite=True)')
print('• transforms["coalesce"](*cols, output_name=None, overwrite=True)')
print()

print("参数说明:")
print("Parameter explanations:")
print("• col: 列名 (column name)")
print("• output_name: 输出列名 (output column name)")
print("• overwrite: 是否覆盖原列，默认True (whether to overwrite, default True)")
print("• length: 填充长度 (padding length)")
print("• pad_string: 填充字符 (padding character)")
print("• value: 要替换为NULL的值 (value to replace with NULL)")
print("• *cols: 多个列名用于合并 (multiple column names for coalescing)")
print()

print("=" * 80)
print("🎉 总结")
print("🎉 Summary")
print("=" * 80)
print("✅ 完美实现了你要求的所有功能:")
print("✅ Perfect implementation of all requested features:")
print()
print("1. 🎯 字典 lambda 调用方式: transforms['year']('col')")
print("2. 🔄 默认覆盖原列，无需创建新列")
print("3. 📝 可选择保留原列: overwrite=False")
print("4. 🎨 可自定义输出列名: output_name='custom_name'")
print("5. ⚡ 支持所有7个重新定义的函数")
print("6. 📋 支持配置驱动的变换创建")
print()
print("现在用户只需要:")
print("Now users only need to:")
print('• 输入函数名: transforms["year"]')
print('• 输入参数: ("date_col")')
print('• 默认就会覆盖原列！')
print()
print("🚀 完美实现！Perfect implementation!")