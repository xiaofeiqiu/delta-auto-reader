#!/usr/bin/env python3
"""
Complete examples showing all 4 methods to create transform functions
"""

import pandas as pd
from datetime import datetime

print("=" * 80)
print("COMPLETE TRANSFORM FUNCTIONS GUIDE")
print("4 Different Ways to Create the Same Transforms")
print("=" * 80)

# Sample data
df = pd.DataFrame({
    'transaction_date': pd.to_datetime(['2023-05-15', '2022-12-25', '2024-01-01']),
    'customer_name': ['john doe', 'jane smith', 'bob wilson'],
    'account_id': [123, 45, 6789],
    'status': ['active', 'inactive', 'active'],
    'primary_email': ['john@example.com', None, 'bob@example.com'],
    'backup_email': [None, 'jane.backup@example.com', None],
    'emergency_email': ['john.emergency@example.com', 'jane.emergency@example.com', 'bob.emergency@example.com']
})

print("Sample Data:")
print(df)
print()

print("=" * 80)
print("METHOD 1: REGULAR FUNCTIONS")
print("=" * 80)
print("# Import from feature_store_sdk.projection")
print("from feature_store_sdk.projection import YEAR, MONTH, DAY, LPAD, NULLIF, UPPER, COALESCE")
print()
print("transforms = [")
print("    YEAR('transaction_date'),                    # Extract year")
print("    MONTH('transaction_date'),                   # Extract month")
print("    DAY('transaction_date'),                     # Extract day")
print("    UPPER('customer_name'),                      # Convert to uppercase")
print("    LPAD('account_id', 8, '0'),                  # Pad with zeros")
print("    NULLIF('status', 'inactive'),                # Convert inactive to NULL")
print("    COALESCE('primary_email', 'backup_email', 'emergency_email')  # First available email")
print("]")
print()

print("=" * 80)
print("METHOD 2: FUNCTION MAPPING (CONCISE API)")
print("=" * 80)
print("# Import from feature_store_sdk.projection")
print("from feature_store_sdk.projection import create_transform")
print()
print("transforms = [")
print("    create_transform('YEAR', 'transaction_date'),")
print("    create_transform('MONTH', 'transaction_date'),")
print("    create_transform('DAY', 'transaction_date'),")
print("    create_transform('UPPER', 'customer_name'),")
print("    create_transform('LPAD', 'account_id', 8, '0'),")
print("    create_transform('NULLIF', 'status', 'inactive'),")
print("    create_transform('COALESCE', 'primary_email', 'backup_email', 'emergency_email')")
print("]")
print()

print("=" * 80)
print("METHOD 3: LAMBDA FUNCTIONS")
print("=" * 80)
print("# Import from feature_store_sdk.projection")
print("from feature_store_sdk.projection import (")
print("    year_lambda, month_lambda, day_lambda, upper_lambda,")
print("    lpad_lambda, nullif_lambda, coalesce_lambda")
print(")")
print()
print("transforms = [")
print("    year_lambda('transaction_date'),")
print("    month_lambda('transaction_date'),")
print("    day_lambda('transaction_date'),")
print("    upper_lambda('customer_name'),")
print("    lpad_lambda('account_id', 8, '0'),")
print("    nullif_lambda('status', 'inactive'),")
print("    coalesce_lambda('primary_email', 'backup_email', 'emergency_email')")
print("]")
print()

print("=" * 80)
print("METHOD 4: ULTRA-CONCISE ONE-LINERS")
print("=" * 80)
print("# Import from feature_store_sdk.projection")
print("from feature_store_sdk.projection import year, month, day, upper, lpad, nullif, coalesce")
print()
print("transforms = [")
print("    year('transaction_date'),")
print("    month('transaction_date'),")
print("    day('transaction_date'),")
print("    upper('customer_name'),")
print("    lpad('account_id', 8, '0'),")
print("    nullif('status', 'inactive'),")
print("    coalesce('primary_email', 'backup_email', 'emergency_email')")
print("]")
print()

print("=" * 80)
print("COMPARISON OF ALL METHODS")
print("=" * 80)
print("| Method | Verbosity | Readability | Import Complexity |")
print("|--------|-----------|-------------|-------------------|")
print("| 1. Regular Functions | High | High | Medium |")
print("| 2. Function Mapping | Medium | High | Low |")
print("| 3. Lambda Functions | Medium | Medium | High |")
print("| 4. Ultra-concise | Low | Medium | Medium |")
print()

print("=" * 80)
print("RECOMMENDATIONS")
print("=" * 80)
print("âœ… For beginners: Use Method 1 (Regular Functions)")
print("   - Most explicit and readable")
print("   - Clear function names")
print()
print("âœ… For API consistency: Use Method 2 (Function Mapping)")
print("   - Single import")
print("   - String-based function names")
print("   - Easy to extend")
print()
print("âœ… For performance: Use Method 3 (Lambda Functions)")
print("   - Minimal overhead")
print("   - Direct lambda execution")
print()
print("âœ… For conciseness: Use Method 4 (Ultra-concise)")
print("   - Shortest syntax")
print("   - Quick prototyping")
print()

print("=" * 80)
print("BONUS: DYNAMIC FUNCTION CREATION")
print("=" * 80)
print("# You can also create transforms dynamically!")
print()
print("function_configs = [")
print("    ('YEAR', ['transaction_date']),")
print("    ('UPPER', ['customer_name']),")
print("    ('LPAD', ['account_id', 8, '0'])")
print("]")
print()
print("transforms = [create_transform(func, *args) for func, args in function_configs]")
print()

print("ðŸŽ‰ IMPLEMENTATION COMPLETE!")
print("You now have 7 redefined functions with 4 different usage patterns!")
print("Functions: YEAR, MONTH, DAY, LPAD, NULLIF, UPPER, COALESCE")
print("Usage patterns: Regular, Mapping, Lambda, Ultra-concise")